{"version":3,"sources":["components/Header.js","components/TodoItem.js","components/TodoList.js","components/TodoInput.js","components/Toolbar.js","controller/appController.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","this","props","title","React","Component","TodoItem","toggleItem","e","preventDefault","details","deleteItem","className","done","onClick","TodoList","todos","map","todo","key","TodoInput","submit","saveItem","state","setState","updateValue","target","value","htmlFor","type","onChange","Toolbar","markAllDone","deleteCompleted","deleteAll","appController","saveToStorage","todoItems","localStorage","setItem","JSON","stringify","getFromStorage","getItem","parse","getId","parseInt","App","addTodoItem","todoItem","newTodo","push","toggleTodoStatus","deleteTodoItem","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5acb9b19.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"header\">\r\n                <h1>{this.props.title}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass TodoItem extends React.Component {\r\n\r\n    toggleItem = e => {\r\n        e.preventDefault();\r\n        this.props.toggleItem(this.props.details.id);\r\n    }\r\n\r\n    deleteItem = e => {\r\n        e.preventDefault();\r\n        this.props.deleteItem(this.props.details.id);\r\n    }\r\n    render(){\r\n        return(\r\n            <div className={`todo-item ${this.props.details.done ? \"done\" : \"not-done\"}`}>\r\n                <span className=\"todo-title\">{this.props.details.title}</span>\r\n                <div className=\"todo-status\"><button onClick={this.toggleItem}>{this.props.details.done ? \"Done\" : \"Mark As Done\"}</button></div>\r\n                <button className=\"todo-delete\" onClick={this.deleteItem}>X</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoList extends React.Component {\r\n\r\n    render(){\r\n        const todos = this.props.todos.map((todo) => {\r\n            return <TodoItem details={todo} key={todo.id} toggleItem={this.props.toggleItem} deleteItem={this.props.deleteItem}/>\r\n        });\r\n\r\n        return(\r\n            <div id=\"todo-list\">\r\n                {todos}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TodoList;","import React from 'react'\r\n\r\nclass TodoInput extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            title: ''\r\n        }\r\n    }\r\n\r\n    submit = e => {\r\n        e.preventDefault();\r\n        this.props.saveItem(this.state.title);\r\n        this.setState({ title: ''});\r\n    }\r\n\r\n    updateValue = e => {\r\n        this.setState({\r\n            title: e.target.value\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <form id=\"todo-input\">\r\n                <label htmlFor=\"title-input\">\r\n                    <input type=\"text\" id=\"title-input\" value={this.state.title} onChange={this.updateValue}/>\r\n                </label>\r\n                <button onClick={this.submit}>Enter</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoInput;","import React from 'react';\r\n\r\nclass Toolbar extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <ul id=\"toolbar\">\r\n                <li onClick={this.props.markAllDone}>Mark All Done</li>\r\n                <li onClick={this.props.deleteCompleted}>Delete Completed</li>\r\n                <li onClick={this.props.deleteAll}>Delete All</li>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Toolbar;","const appController = (function(){\r\n    const saveToStorage = (todoItems) => {\r\n        localStorage.setItem(\"todoItems\", JSON.stringify(todoItems));\r\n    }\r\n\r\n    const getFromStorage = () => {\r\n        if(localStorage.getItem(\"todoItems\")) {\r\n            return JSON.parse(localStorage.getItem(\"todoItems\"));\r\n        }else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    const getId = () => {\r\n        let id;\r\n        if(localStorage.getItem(\"uniqueId\")){\r\n            id = parseInt(localStorage.getItem(\"uniqueId\"));\r\n            localStorage.setItem(\"uniqueId\", (id + 1))\r\n            return id;\r\n\r\n        }else{\r\n            id = 0;\r\n            localStorage.setItem(\"uniqueId\", (id + 1));\r\n            return id;\r\n        }\r\n    }\r\n\r\n    return {\r\n        saveToStorage,\r\n        getFromStorage,\r\n        getId,\r\n    }\r\n})();\r\n\r\nexport default appController;","import React from 'react';\nimport Header from './components/Header'\nimport TodoList from './components/TodoList'\nimport TodoInput from './components/TodoInput';\nimport Toolbar from './components/Toolbar';\nimport appController from './controller/appController';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    todos: appController.getFromStorage(),\n  }\n\n  addTodoItem = (todoItem) => {\n    const todos = this.state.todos;\n    const newTodo = {\n      id: appController.getId(),\n      title: todoItem,\n      done: false,\n    } \n    todos.push(newTodo);\n    appController.saveToStorage(todos);\n    this.setState({\n        todos: todos,\n    })\n  }\n\n  toggleTodoStatus = (id) => {\n    const todos = this.state.todos.map(function(todo){\n      if(todo.id === id) todo.done = !todo.done;\n      return todo;\n    });\n    appController.saveToStorage(todos);\n\n    this.setState({\n      todos: todos\n    })\n  }\n\n  deleteTodoItem = (id) => {\n    const todos = this.state.todos.filter(function(todo){\n      return todo.id !== id;\n    });\n    appController.saveToStorage(todos);\n    this.setState({\n      todos: todos\n    })\n  }\n\n  deleteCompleted = () => {\n    const todos = this.state.todos.filter(function(todo){\n      return !todo.done;\n    })\n    appController.saveToStorage(todos);\n    this.setState({\n      todos: todos\n    })\n  }\n\n  deleteAll = () => {\n    const todos = [];\n    appController.saveToStorage(todos);\n    this.setState({\n      todos: todos\n    })\n  }\n\n  markAllDone = () => {\n    const todos = this.state.todos.map(function(todo){\n      todo.done = true;\n      return todo;\n    });\n    appController.saveToStorage(todos);\n\n    this.setState({\n      todos: todos\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header title=\"Todo List\"/>\n        <Toolbar \n          markAllDone={this.markAllDone}\n          deleteCompleted={this.deleteCompleted}\n          deleteAll={this.deleteAll}\n        />\n        <TodoInput saveItem={this.addTodoItem}/>\n        <TodoList todos={this.state.todos} toggleItem={this.toggleTodoStatus} deleteItem={this.deleteTodoItem}/>\n      </div>\n    );\n  }\n}\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}